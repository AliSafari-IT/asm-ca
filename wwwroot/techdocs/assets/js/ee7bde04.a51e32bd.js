"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[575],{8490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var r=t(2408),a=t(6870),i=t(5569);const s={slug:"manage-submenus-in-react",title:"Managing Submenus in React",authors:["alisafari"],tags:["react","typescript","menu","recursion"]},u=void 0,o={authorsImageUrls:[void 0]},c=[{value:"1. Define the Data Structure",id:"1-define-the-data-structure",level:2},{value:"2. Create a Recursive Menu Component",id:"2-create-a-recursive-menu-component",level:2},{value:"3. Render the Menu Component with Data",id:"3-render-the-menu-component-with-data",level:2},{value:"4. Styling and Enhancements",id:"4-styling-and-enhancements",level:2},{value:"5. Adding Collapsible Submenus",id:"5-adding-collapsible-submenus",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"One of the challenges in building dynamic web applications is managing menus with an unknown depth of submenus."})}),(0,a.jsx)(n.p,{children:"Consider a scenario where our lab automation system needs to display a hierarchical structure of lab processes, equipment, or data categories. These hierarchies can vary in depth and complexity, making a recursive menu component an ideal solution. Here\u2019s how we can frame this approach within the context of a lab automation app."}),(0,a.jsx)(n.p,{children:"Traditional static approaches struggle with deeply nested structures, making it challenging to render menus correctly without knowing the depth in advance. This issue often arises in complex applications where menu items are dynamically generated and can have multiple levels of submenus."})]}),"\n",(0,a.jsx)(n.p,{children:"So, to manage an unknown depth of submenus in a React component with TypeScript, we can use a recursive component approach. This method allows the component to render nested submenus dynamically based on the data structure provided. Here\u2019s a step-by-step guide on how to achieve this:"}),"\n",(0,a.jsx)(n.h2,{id:"1-define-the-data-structure",children:"1. Define the Data Structure"}),"\n",(0,a.jsx)(n.p,{children:"Assume we have a nested data structure representing the menu and submenus."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'interface MenuItem {\r\n  title: string;\r\n  submenus?: MenuItem[];\r\n}\r\n\r\nconst menuData: MenuItem[] = [\r\n  {\r\n    title: "Menu 1",\r\n    submenus: [\r\n      {\r\n        title: "Submenu 1-1",\r\n        submenus: [{ title: "Submenu 1-1-1" }, { title: "Submenu 1-1-2" }],\r\n      },\r\n      { title: "Submenu 1-2" },\r\n    ],\r\n  },\r\n  {\r\n    title: "Menu 2",\r\n    submenus: [{ title: "Submenu 2-1" }, { title: "Submenu 2-2" }],\r\n  },\r\n];\n'})}),"\n",(0,a.jsx)(n.h2,{id:"2-create-a-recursive-menu-component",children:"2. Create a Recursive Menu Component"}),"\n",(0,a.jsx)(n.p,{children:"This component will render the menu items and recursively render any submenus."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import React from "react";\r\n\r\ninterface MenuItemProps {\r\n  item: MenuItem;\r\n}\r\n\r\nconst MenuItem: React.FC<MenuItemProps> = ({ item }) => {\r\n  return (\r\n    <li>\r\n      {item.title}\r\n      {item.submenus && (\r\n        <ul>\r\n          {item.submenus.map((submenu, index) => (\r\n            <MenuItem key={index} item={submenu} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\ninterface MenuProps {\r\n  data: MenuItem[];\r\n}\r\n\r\nconst Menu: React.FC<MenuProps> = ({ data }) => {\r\n  return (\r\n    <ul>\r\n      {data.map((item, index) => (\r\n        <MenuItem key={index} item={item} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Menu;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"3-render-the-menu-component-with-data",children:"3. Render the Menu Component with Data"}),"\n",(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.code,{children:"Menu"})," component in our main component and pass the ",(0,a.jsx)(n.code,{children:"menuData"})," as a prop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import React from "react";\r\nimport Menu from "./Menu"; // Adjust the path based on our file structure\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1>Dynamic Menu</h1>\r\n      <Menu data={menuData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"4-styling-and-enhancements",children:"4. Styling and Enhancements"}),"\n",(0,a.jsx)(n.p,{children:"You can enhance the appearance and behavior of the menu with CSS and additional features like collapsible submenus."}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s an example of adding basic CSS to style the menu:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"ul {\r\n  list-style-type: none;\r\n  padding-left: 20px;\r\n}\r\n\r\nli {\r\n  margin: 5px 0;\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"5-adding-collapsible-submenus",children:"5. Adding Collapsible Submenus"}),"\n",(0,a.jsx)(n.p,{children:"To add collapsible functionality, we can use state to track the open/closed status of submenus."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import React, { useState } from "react";\r\n\r\ninterface MenuItemProps {\r\n  item: MenuItem;\r\n}\r\n\r\nconst MenuItem: React.FC<MenuItemProps> = ({ item }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <li>\r\n      <div onClick={() => setIsOpen(!isOpen)}>{item.title}</div>\r\n      {isOpen && item.submenus && (\r\n        <ul>\r\n          {item.submenus.map((submenu, index) => (\r\n            <MenuItem key={index} item={submenu} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n};\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},5569:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>u});var r=t(6326);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},2408:e=>{e.exports=JSON.parse('{"permalink":"/blog/manage-submenus-in-react","editUrl":"https://github.com/AliSafari-IT/asafarim/edit/main/techdocs/blog/2024-05-25-mdx-blog-post.mdx","source":"@site/blog/2024-05-25-mdx-blog-post.mdx","title":"Managing Submenus in React","description":"One of the challenges in building dynamic web applications is managing menus with an unknown depth of submenus.","date":"2024-05-25T00:00:00.000Z","tags":[{"inline":false,"label":"React","permalink":"/blog/tags/react","description":"React framework-related content"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"TypeScript programming language content"},{"inline":false,"label":"Menu","permalink":"/blog/tags/menu","description":"Content related to menu design and implementation"},{"inline":false,"label":"Recursion","permalink":"/blog/tags/recursion","description":"Discussions and examples on recursion"}],"readingTime":5.24,"hasTruncateMarker":true,"authors":[{"name":"Ali Safari","title":"Scientific App Developer and Analyst @ XiTechniX / Unlimit-IT","url":"https://asafari.be","socials":{"x":"https://x.com/asafarim","github":"https://github.com/ali-safari-m"},"imageURL":"https://avatars.githubusercontent.com/u/58768873?s=400&u=04a4cc5767f2aae1e50c860eee4ae56b7d9a9a13&v=4","key":"alisafari","page":null}],"frontMatter":{"slug":"manage-submenus-in-react","title":"Managing Submenus in React","authors":["alisafari"],"tags":["react","typescript","menu","recursion"]},"unlisted":false,"nextItem":{"title":"React bindings for Styletron","permalink":"/blog/styletron-react"}}')}}]);