"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[1533],{7733:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"outlines/software-development/Automation/cicd-processes","title":"CI/CD automation steps","description":"An example of the CI/CD automation process is shown in the table below:","source":"@site/docs/outlines/010-software-development/0106-Automation/01-cicd-processes.md","sourceDirName":"outlines/010-software-development/0106-Automation","slug":"/cicd/overview","permalink":"/docs/cicd/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/AliSafari-IT/asafarim/edit/main/techdocs/docs/outlines/010-software-development/0106-Automation/01-cicd-processes.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"CI/CD automation steps","slug":"/cicd/overview"},"sidebar":"tutorialSidebar","previous":{"title":"Testing in Software Development ","permalink":"/docs/outlines/software-development/Testing/intro"},"next":{"title":"Developer tools","permalink":"/docs/category/developer-tools"}}');var o=s(6870),i=s(5569);const r={sidebar_position:1,title:"CI/CD automation steps",slug:"/cicd/overview"},c=void 0,a={},d=[];function l(e){const t={p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"An example of the CI/CD automation process is shown in the table below:"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Stage"}),(0,o.jsx)("th",{children:"Description"}),(0,o.jsx)("th",{children:"Tools"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Code Commit"}),(0,o.jsx)("td",{children:"A developer makes changes to the codebase and commits them to the GitLab repository."}),(0,o.jsx)("td",{children:"GitLab"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Build"}),(0,o.jsx)("td",{children:"GitLab CI/CD detects the new commit and starts the build process. The build process may involve compiling the code, creating a Docker image, or generating an executable file."}),(0,o.jsx)("td",{children:"GitLab CI/CD, Docker"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Test"}),(0,o.jsx)("td",{children:"GitLab CI/CD runs a suite of tests on the built code to ensure that it meets quality standards. This may include unit tests, integration tests, and code quality checks."}),(0,o.jsx)("td",{children:"GitLab CI/CD, testing frameworks (e.g. Jest, Mocha)"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Deploy to Staging"}),(0,o.jsx)("td",{children:"If the tests pass, GitLab CI/CD deploys the code changes to a staging environment for further testing and validation. This environment may be a Kubernetes cluster, a cloud provider like AWS or Azure, etc."}),(0,o.jsx)("td",{children:"GitLab CI/CD, Kubernetes, AWS, Azure"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"Deploy to Production"}),(0,o.jsx)("td",{children:"If the tests pass in the staging environment, GitLab CI/CD deploys the code changes to the production environment."}),(0,o.jsx)("td",{children:"GitLab CI/CD, Kubernetes, AWS, Azure"})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},5569:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(6326);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);