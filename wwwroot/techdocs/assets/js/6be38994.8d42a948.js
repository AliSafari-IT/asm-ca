"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[2573],{2261:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"outlines/devtools/dataformats/msgpack-lite/csharp-example","title":"Using MessagePack in .Net ","description":"HHere\'s an example of how to use MessagePack in .NET Core 3.1 or later with C# using the MessagePack NuGet package:","source":"@site/docs/outlines/015-devtools/02-dataformats/006-msgpack-lite/03-csharp-example.md","sourceDirName":"outlines/015-devtools/02-dataformats/006-msgpack-lite","slug":"/outlines/devtools/dataformats/msgpack-lite/csharp-example","permalink":"/docs/outlines/devtools/dataformats/msgpack-lite/csharp-example","draft":false,"unlisted":false,"editUrl":"https://github.com/AliSafari-IT/asafarim/edit/main/techdocs/docs/outlines/015-devtools/02-dataformats/006-msgpack-lite/03-csharp-example.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Using MessagePack in .Net "},"sidebar":"tutorialSidebar","previous":{"title":"Using MessagePack in TypeScript","permalink":"/docs/outlines/devtools/dataformats/msgpack-lite/ts-example"},"next":{"title":"Introduction","permalink":"/docs/outlines/devtools/versioncontrol/intro"}}');var n=s(6870),o=s(5569);const c={sidebar_position:1,title:"Using MessagePack in .Net "},i=void 0,r={},l=[];function d(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["HHere's an example of how to use MessagePack in .NET Core 3.1 or later with C# using the ",(0,n.jsx)(t.em,{children:"MessagePack"})," NuGet package:"]}),"\n",(0,n.jsx)(t.p,{children:"First, you need to install the package:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c#",children:"Install-Package MessagePack\n"})}),"\n",(0,n.jsx)(t.p,{children:"Then, you can use the MessagePack library to serialize and deserialize your objects:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:"import * as msgpack from 'msgpack-lite';\r\n\r\n// Define your object\r\nconst obj = { name: 'Alice', age: 30, email: ['alice@example.com'] };\r\n\r\n// Encode the object as a MessagePack buffer\r\nconst buffer = msgpack.encode(obj);\r\n\r\n// Decode the buffer back into an object\r\nconst decodedObj = msgpack.decode(buffer);\r\n\r\nconsole.log(decodedObj); // { name: 'Alice', age: 30, email: ['alice@example.com'] }\n"})}),"\n",(0,n.jsx)(t.p,{children:"This code defines an object obj, encodes it as a MessagePack buffer using msgpack.encode, and decodes the buffer back into an object using msgpack.decode. The resulting decodedObj should be the same as the original obj."}),"\n",(0,n.jsxs)(t.p,{children:["Note that msgpack-lite supports a wide range of data types, including arrays, maps, numbers, and strings. You can find more information about how to use the library in the official documentation: ",(0,n.jsx)(t.a,{href:"https://github.com/kawanet/msgpack-lite",children:"https://github.com/kawanet/msgpack-lite"})]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},5569:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var a=s(6326);const n={},o=a.createContext(n);function c(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);